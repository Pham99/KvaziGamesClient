name: Unity WebGL Build

on:
  push:
    branches: [ main ]
  # pull_request:

jobs:
  build:
    name: Build WebGL
    runs-on: ubuntu-latest

    steps:
      # Check out the repository containing your Unity project.
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Git LFS is used to manage large files in Git repositories.
      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

      - name: Restore LFS cache
        uses: actions/cache@v3
        id: lfs-cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}

      - name: Git LFS Pull
        run: |
          git lfs pull
          git add .
          git reset --hard
      
      # Caching the Library folder to speed up the build process.
      - uses: actions/cache@v4
        with:
          path: Library
          key: Library-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-
      
      # Build the Unity project for WebGL using game-ci/unity-builder.
      - name: Build Unity Project (WebGL)
        uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          targetPlatform: WebGL
          # Specify your Unity version if necessary (e.g., "2021.3.12f1"). Otherwise, it will try to auto-detect from the project.
          # Optionally specify the build method if you have a custom build script:
          # executeMethod: BuildScript.PerformWebGLBuild
          # Optionally specify an output directory (default is "build")
          versioning: Semantic

      # Deploy the build files to your remote server using SCP.
      #- name: Deploy WebGL Build via SCP
        #uses: appleboy/scp-action@v0.1.7
        #with:
         # host: ${{ secrets.REMOTE_HOST }}
          #username: ${{ secrets.REMOTE_USER }}
          #key: ${{ secrets.REMOTE_KEY }}
          #port: ${{ secrets.REMOTE_PORT }}
          #source: "build"
          #target: "app/WebGLBuilds" 

      # Deploy the build files to your remote server using rsync.
      - name: Deploy WebGL Build via rsync
        uses: burnett01/rsync-deployments@7.0.2
        with:
          switches: -avzr --delete
          path: build/
          remote_path: app/WebGLBuilds/
          remote_host: ${{ secrets.REMOTE_HOST }}
          remote_user: ${{ secrets.REMOTE_USER }}
          remote_key: ${{ secrets.REMOTE_KEY }}
          remote_port: ${{ secrets.REMOTE_PORT }}